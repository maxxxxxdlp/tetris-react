import{eE as I,eG as $,eF as T,d as O,ch as v,c3 as g,eL as E,eM as M,U as b,bd as F,by as L,eN as P,a as x,ar as R,e as s,y as p,eO as S,i as U,b0 as j,c as N,eP as J,l as q}from"./index-Bv0Hohk0.js";import{m as A}from"./MultiOriginJSONSupport-BZQTWpeF.js";import{i as _}from"./APIKeyMixin-0dcGhBjP.js";import{m as k,f as V,X as z}from"./SublayersOwner-DBV_EpqX.js";import{l as G}from"./ArcGISService-uQPwYVuT.js";import{e as Z}from"./CustomParametersMixin-DKqLR8tC.js";import{u as B}from"./OperationalLayer-CgleBBYh.js";import{j as C}from"./PortalLayer-DaNsTDLt.js";import{f as D}from"./TemporalLayer-C1KR7WBT.js";import{d as H}from"./commonProperties-71l2LJ6s.js";import{m as K}from"./ExportImageParameters-dIEgPVH2.js";import{t as W}from"./imageBitmapUtils-xnOZZjZM.js";import{e as w}from"./sublayerUtils-BA9xuOZk.js";import{e as X}from"./versionUtils-C_5-kApp.js";import"./portalItemUtils-JWUEQXnE.js";import"./UniqueValueRenderer-C8B84zcF.js";import"./diffUtils-D_LMLEpD.js";import"./jsonUtils-CvVppPa6.js";import"./FieldsIndex-j25pkYvJ.js";import"./UnknownTimeZone-81r46adS.js";import"./heatmapUtils-CpfvS1IE.js";import"./QueryTask-C7d6Y6R0.js";import"./executeForIds-Kg6Liu2V.js";import"./query-Cal2QOnU.js";import"./pbfQueryUtils-CqZlBXBb.js";import"./pbf-lkSPrDyg.js";import"./queryZScale-DalU9HM9.js";import"./executeQueryJSON-ClxeSi8X.js";import"./FeatureSet-DZOCMyA1.js";import"./executeQueryPBF-BP4oOfTZ.js";import"./FeatureType-BD0awc-y.js";import"./FeatureTemplate-BU0tvyV1.js";import"./LabelClass-DPzxJqvN.js";import"./labelingInfo-B67D2ZxN.js";import"./LayerFloorInfo-D_j1_8Sf.js";import"./serviceCapabilitiesUtils-JAuO7eFe.js";import"./AttachmentQuery-B5Jh59Bx.js";import"./popupUtils-Cu5Z_JS9.js";import"./TimeInfo-Cqort3EX.js";import"./floorFilterUtils-DZ5C6FQv.js";let r=class extends I(D($(k(V(G(B(C(A(T(_(Z(q)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}load(e){const i=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(O).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(e,i){const l=i.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,i,l,t){var h,c,y;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:o})=>o&&o.toArray().reverse()).toArray();let n=!1;if((h=this.capabilities)!=null&&h.operations.supportsExportMap&&((y=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&y.supportsDynamicLayers)){const o=v(t.origin);if(o===g.PORTAL_ITEM){const f=this.createSublayersForOrigin("service").sublayers;n=w(a,f,g.SERVICE)}else if(o>g.PORTAL_ITEM){const f=this.createSublayersForOrigin("portal-item");n=w(a,f.sublayers,v(f.origin))}}const m=[],u={writeSublayerStructure:n,...t};let d=n;a.forEach(o=>{const f=o.write({},u);m.push(f),d=d||o.originOf("visible")==="user"}),m.some(o=>Object.keys(o).length>1)&&(i.layers=m),d&&(i.visibleLayers=a.filter(o=>o.visible).map(o=>o.id))}createExportImageParameters(e,i,l,t){const a=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new K({layer:this,floors:t==null?void 0:t.floors,scale:E({extent:e,width:i})*a}),m=n.toJSON();n.destroy();const u=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},d=e==null?void 0:e.spatialReference,h=M(d);m.dpi*=a;const c={};if(t!=null&&t.timeExtent){const{start:y,end:o}=t.timeExtent.toJSON();c.time=y&&o&&y===o?""+y:`${y??"null"},${o??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:i+","+l,...m,...u,...c}}async fetchImage(e,i,l,t){const{data:a}=await this._fetchImage("image",e,i,l,t);return a}async fetchImageBitmap(e,i,l,t){const{data:a,url:n}=await this._fetchImage("blob",e,i,l,t);return W(a,n,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await b(this.url,i),{extent:t,fullExtent:a,timeExtent:n}=l,m=t||a;return{fullExtent:m&&F.fromJSON(m),timeExtent:n&&L.fromJSON({start:n[0],end:n[1]})}}loadAll(){return P(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return X(this,e)}async _fetchImage(e,i,l,t,a){var u,d,h;const n={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(i,l,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(((u=n.query)==null?void 0:u.dynamicLayers)!=null&&!((h=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&h.supportsDynamicLayers))throw new x("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:c}=await b(m,n);return{data:c,url:m}}catch(c){throw R(c)?c:new x("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:c})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:l}=await b(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};s([p(S("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),s([p({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),s([p()],r.prototype,"dpi",void 0),s([p()],r.prototype,"gdbVersion",void 0),s([p()],r.prototype,"imageFormat",void 0),s([U("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),s([p()],r.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),s([p(S("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),s([p()],r.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),s([j("sublayers",{layers:{type:[z]},visibleLayers:{type:[J]}})],r.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),s([p(H)],r.prototype,"url",void 0),r=s([N("esri.layers.MapImageLayer")],r);const Ae=r;export{Ae as default};
